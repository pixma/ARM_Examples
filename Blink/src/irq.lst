   1              		.file	"irq.c"
   9              	.Ltext0:
  10              		.align	2
  12              	DefaultVICHandler:
  13              	.LFB2:
  14              		.file 1 "Src/irq.c"
   1:Src/irq.c     **** /*****************************************************************************
   2:Src/irq.c     ****  *   irq.c: Interrupt handler C file for Philips LPC214x Family Microprocessors
   3:Src/irq.c     ****  *
   4:Src/irq.c     ****  *   Copyright(C) 2006, Philips Semiconductor
   5:Src/irq.c     ****  *   All rights reserved.
   6:Src/irq.c     ****  *
   7:Src/irq.c     ****  *   History
   8:Src/irq.c     ****  *   2005.10.01  ver 1.00    Prelimnary version, first Release
   9:Src/irq.c     ****  *
  10:Src/irq.c     **** ******************************************************************************/
  11:Src/irq.c     **** #include "LPC214x.h"			/* LPC23XX Peripheral Registers	*/
  12:Src/irq.c     **** #include "type.h"
  13:Src/irq.c     **** #include "irq.h"
  14:Src/irq.c     **** 
  15:Src/irq.c     **** /******************************************************************************
  16:Src/irq.c     **** ** Function name:		DefaultVICHandler
  17:Src/irq.c     **** **
  18:Src/irq.c     **** ** Descriptions:		Default VIC interrupt handler.
  19:Src/irq.c     **** **				This handler is set to deal with spurious 
  20:Src/irq.c     **** **				interrupt.
  21:Src/irq.c     **** **				If the IRQ service routine reads the VIC
  22:Src/irq.c     **** **				address register, and no IRQ slot responses
  23:Src/irq.c     **** **				as described above, this address is returned.
  24:Src/irq.c     **** ** parameters:			None
  25:Src/irq.c     **** ** Returned value:		None
  26:Src/irq.c     **** ** 
  27:Src/irq.c     **** ******************************************************************************/
  28:Src/irq.c     **** // mthomas: inserted static to avoid gcc-warning
  29:Src/irq.c     **** static void DefaultVICHandler (void) __irq 
  30:Src/irq.c     **** {
  15              	@ Function supports interworking.
  16              		@ args = 0, pretend = 0, frame = 0
  17              		@ frame_needed = 0, uses_anonymous_args = 0
  18              		@ link register save eliminated.
  19              		.loc 1 35 0
  31:Src/irq.c     ****     /* if the IRQ is not installed into the VIC, and interrupt occurs, the
  32:Src/irq.c     ****     default interrupt VIC address will be used. This could happen in a race 
  33:Src/irq.c     ****     condition. For debugging, use this endless loop to trace back. */
  34:Src/irq.c     ****     /* For more details, see Philips appnote AN10414 */
  35:Src/irq.c     ****     VICVectAddr = 0;		/* Acknowledge Interrupt */ 
  20              	r2, #0
  21 0000 0020A0E3 		mvn	r3, #0
  22 0004 0030E0E3 		str	r2, [r3, #-4047]
  23 0008 CF2F03E5 		.loc 1 30 0
  24              		@ lr needed for prologue
  25              	.L2:
  26              		b	.L2
  27 000c FEFFFFEA 	.LFE2:
  29              		.align	2
  30              		.global	init_VIC
  32              	init_VIC:
  33              	.LFB3:
  34              		.loc 1 49 0
  36:Src/irq.c     ****     while ( 1 );
  37:Src/irq.c     **** }
  38:Src/irq.c     **** 
  39:Src/irq.c     **** /* Initialize the interrupt controller */
  40:Src/irq.c     **** /******************************************************************************
  41:Src/irq.c     **** ** Function name:		init_VIC
  42:Src/irq.c     **** **
  43:Src/irq.c     **** ** Descriptions:		Initialize VIC interrupt controller.
  44:Src/irq.c     **** ** parameters:			None
  45:Src/irq.c     **** ** Returned value:		None
  46:Src/irq.c     **** ** 
  47:Src/irq.c     **** ******************************************************************************/
  48:Src/irq.c     **** void init_VIC(void) 
  49:Src/irq.c     **** {
  35              	ports interworking.
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38              		@ link register save eliminated.
  39              		.loc 1 54 0
  50:Src/irq.c     ****     DWORD i = 0;
  51:Src/irq.c     ****     DWORD *vect_addr, *vect_cntl;
  52:Src/irq.c     ****    	
  53:Src/irq.c     ****     /* initialize VIC*/
  54:Src/irq.c     ****     VICIntEnClr = 0xffffffff;
  40              	r3, #0
  41 0010 0030E0E3 		.loc 1 55 0
  55:Src/irq.c     ****     VICVectAddr = 0;
  42              	ov	r2, #0
  43 0014 0020A0E3 		.loc 1 54 0
  44              		str	r3, [r3, #-4075]
  45 0018 EB3F03E5 		.loc 1 49 0
  46              		@ lr needed for prologue
  47              		.loc 1 55 0
  48              		str	r2, [r3, #-4047]
  49 001c CF2F03E5 		.loc 1 56 0
  56:Src/irq.c     ****     VICIntSelect = 0;
  50              	 [r3, #-4083]
  51 0020 F32F03E5 		sub	r2, r2, #3840
  52 0024 0F2C42E2 	.L5:
  53              		.loc 1 63 0
  57:Src/irq.c     **** 
  58:Src/irq.c     ****     /* set all the vector and vector control register to 0 */
  59:Src/irq.c     ****     for ( i = 0; i < VIC_SIZE; i++ )
  60:Src/irq.c     ****     {
  61:Src/irq.c     **** 	vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
  62:Src/irq.c     **** 	vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
  63:Src/irq.c     **** 	*vect_addr = 0;	
  54              		r3, #0
  55 0028 0030A0E3 		.loc 1 64 0
  64:Src/irq.c     **** 	*vect_cntl = 0;
  56              	tr	r3, [r2, #256]
  57 002c 003182E5 		.loc 1 63 0
  58              		str	r3, [r2, #0]
  59 0030 003082E5 		.loc 1 64 0
  60              		add	r2, r2, #4
  61 0034 042082E2 		.loc 1 59 0
  62              		cmn	r2, #3776
  63 0038 3B0D72E3 		bne	.L5
  64 003c F9FFFF1A 		.loc 1 68 0
  65:Src/irq.c     ****     }
  66:Src/irq.c     **** 
  67:Src/irq.c     ****     /* Install the default VIC handler here */
  68:Src/irq.c     ****     VICDefVectAddr = (DWORD)DefaultVICHandler;   
  65              	.L10
  66 0040 08209FE5 		mvn	r3, #0
  67 0044 0030E0E3 		str	r2, [r3, #-4043]
  68 0048 CB2F03E5 		.loc 1 70 0
  69:Src/irq.c     ****     return;
  70:Src/irq.c     **** }
  69              	lr
  70 004c 1EFF2FE1 	.L11:
  71              		.align	2
  72              	.L10:
  73              		.word	DefaultVICHandler
  74 0050 00000000 	.LFE3:
  76              		.align	2
  77              		.global	install_irq
  79              	install_irq:
  80              	.LFB4:
  81              		.loc 1 86 0
  71:Src/irq.c     **** 
  72:Src/irq.c     **** /******************************************************************************
  73:Src/irq.c     **** ** Function name:		install_irq
  74:Src/irq.c     **** **
  75:Src/irq.c     **** ** Descriptions:		Install interrupt handler
  76:Src/irq.c     **** **				The max VIC size is 16, but, there are 32 interrupt
  77:Src/irq.c     **** **				request inputs. Not all of them can be installed into
  78:Src/irq.c     **** **				VIC table at the same time.
  79:Src/irq.c     **** **				The order of the interrupt request installation is
  80:Src/irq.c     **** **				first come first serve.
  81:Src/irq.c     **** ** parameters:			Interrupt number and interrupt handler address
  82:Src/irq.c     **** ** Returned value:		true or false, when the table is full, return false
  83:Src/irq.c     **** ** 
  84:Src/irq.c     **** ******************************************************************************/
  85:Src/irq.c     **** DWORD install_irq( DWORD IntNumber, void *HandlerAddr )
  86:Src/irq.c     **** {
  82              	upports interworking.
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              	.LVL0:
  86              		.loc 1 91 0
  87:Src/irq.c     ****     DWORD i;
  88:Src/irq.c     ****     DWORD *vect_addr;
  89:Src/irq.c     ****     DWORD *vect_cntl;
  90:Src/irq.c     ****       
  91:Src/irq.c     ****     VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
  87              	r3, #1
  88 0054 0130A0E3 		.loc 1 86 0
  89              		str	lr, [sp, #-4]!
  90 0058 04E02DE5 	.LCFI0:
  91              		.loc 1 91 0
  92              		mov	lr, r3, asl r0
  93 005c 13E0A0E1 		mvn	r3, #0
  94 0060 0030E0E3 		str	lr, [r3, #-4075]
  95 0064 EBEF03E5 		ldr	ip, .L24
  96 0068 44C09FE5 		mov	r2, #0
  97 006c 0020A0E3 	.LVL1:
  98              	.L13:
  99              		.loc 1 99 0
  92:Src/irq.c     ****     
  93:Src/irq.c     ****     for ( i = 0; i < VIC_SIZE; i++ )
  94:Src/irq.c     ****     {
  95:Src/irq.c     **** 	/* find first un-assigned VIC address for the handler */
  96:Src/irq.c     **** 
  97:Src/irq.c     **** 	vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
  98:Src/irq.c     **** 	vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
  99:Src/irq.c     **** 	if ( *vect_addr == (DWORD)NULL )
 100              	 #-256]
 101 0070 00311CE5 		cmp	r3, #0
 102 0074 000053E3 		.loc 1 93 0
 103              		add	r2, r2, #1
 104 0078 012082E2 		.loc 1 99 0
 105              		beq	.L21
 106 007c 0400000A 		.loc 1 93 0
 107              		cmp	r2, #16
 108 0080 100052E3 		add	ip, ip, #4
 109 0084 04C08CE2 		bne	.L13
 110 0088 F8FFFF1A 		.loc 1 106 0
 100:Src/irq.c     **** 	{
 101:Src/irq.c     **** 	    *vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
 102:Src/irq.c     **** 	    *vect_cntl = (DWORD)(IRQ_SLOT_EN | IntNumber);
 103:Src/irq.c     **** 	    break;
 104:Src/irq.c     **** 	}
 105:Src/irq.c     ****     }
 106:Src/irq.c     ****     if ( i == VIC_SIZE )
 111              	
 112 008c 0000A0E3 	.LVL2:
 113              		b	.L19
 114 0090 050000EA 	.LVL3:
 115              	.L21:
 116              		.loc 1 102 0
 117              		orr	r3, r0, #32
 118 0094 203080E3 		str	r3, [ip, #0]
 119 0098 00308CE5 		.loc 1 110 0
 107:Src/irq.c     ****     {
 108:Src/irq.c     **** 	return( FALSE );		/* fatal error, can't find empty vector slot */
 109:Src/irq.c     ****     }
 110:Src/irq.c     ****     VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
 120              	 #0
 121 009c 0030E0E3 		.loc 1 101 0
 122              		str	r1, [ip, #-256]
 123 00a0 00110CE5 		.loc 1 110 0
 124              		str	lr, [r3, #-4079]
 125 00a4 EFEF03E5 		mov	r0, #1
 126 00a8 0100A0E3 	.LVL4:
 127              	.L19:
 128              		.loc 1 112 0
 111:Src/irq.c     ****     return( TRUE );
 112:Src/irq.c     **** }
 129              	[sp], #4
 130 00ac 04E09DE4 		bx	lr
 131 00b0 1EFF2FE1 	.L25:
 132              		.align	2
 133              	.L24:
 134              		.word	-3584
 135 00b4 00F2FFFF 	.LFE4:
 137              		.align	2
 138              		.global	uninstall_irq
 140              	uninstall_irq:
 141              	.LFB5:
 142              		.loc 1 127 0
 113:Src/irq.c     **** 
 114:Src/irq.c     **** /******************************************************************************
 115:Src/irq.c     **** ** Function name:		uninstall_irq
 116:Src/irq.c     **** **
 117:Src/irq.c     **** ** Descriptions:		Uninstall interrupt handler
 118:Src/irq.c     **** **				Find the interrupt handler installed in the VIC
 119:Src/irq.c     **** **				based on the interrupt number, set the location
 120:Src/irq.c     **** **				back to NULL to uninstall it.
 121:Src/irq.c     **** ** parameters:			Interrupt number
 122:Src/irq.c     **** ** Returned value:		true or false, when the interrupt number is not found, 
 123:Src/irq.c     **** **				return false
 124:Src/irq.c     **** ** 
 125:Src/irq.c     **** ******************************************************************************/
 126:Src/irq.c     **** DWORD uninstall_irq( DWORD IntNumber )
 127:Src/irq.c     **** {
 143              	pports interworking.
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              	.LVL5:
 148              		.loc 1 132 0
 128:Src/irq.c     ****     DWORD i;
 129:Src/irq.c     ****     DWORD *vect_addr;
 130:Src/irq.c     ****     DWORD *vect_cntl;
 131:Src/irq.c     ****       
 132:Src/irq.c     ****     VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
 149              	3, #1
 150 00b8 0130A0E3 		mov	ip, r3, asl r0
 151 00bc 13C0A0E1 		mvn	r3, #0
 152 00c0 0030E0E3 		str	ip, [r3, #-4075]
 153 00c4 EBCF03E5 		ldr	r2, .L38
 154 00c8 44209FE5 		.loc 1 127 0
 155              		@ lr needed for prologue
 156              		.loc 1 132 0
 157              		mov	r1, #0
 158 00cc 0010A0E3 	.LVL6:
 159              	.L27:
 160              		.loc 1 139 0
 133:Src/irq.c     ****     
 134:Src/irq.c     ****     for ( i = 0; i < VIC_SIZE; i++ )
 135:Src/irq.c     ****     {
 136:Src/irq.c     **** 	/* find first un-assigned VIC address for the handler */
 137:Src/irq.c     **** 	vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
 138:Src/irq.c     **** 	vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
 139:Src/irq.c     **** 	if ( (*vect_cntl & ~IRQ_SLOT_EN ) == IntNumber )
 161              	, #0]
 162 00d0 003092E5 		bic	r3, r3, #32
 163 00d4 2030C3E3 		cmp	r3, r0
 164 00d8 000053E1 		.loc 1 134 0
 165              		add	r1, r1, #1
 166 00dc 011081E2 		.loc 1 139 0
 167              		beq	.L35
 168 00e0 0400000A 		.loc 1 134 0
 169              		cmp	r1, #16
 170 00e4 100051E3 		add	r2, r2, #4
 171 00e8 042082E2 		bne	.L27
 172 00ec F7FFFF1A 		.loc 1 146 0
 140:Src/irq.c     **** 	{
 141:Src/irq.c     **** 	    *vect_addr = (DWORD)NULL;	/* clear the VIC entry in the VIC table */
 142:Src/irq.c     **** 	    *vect_cntl &= ~IRQ_SLOT_EN;	/* disable SLOT_EN bit */	
 143:Src/irq.c     **** 	    break;
 144:Src/irq.c     **** 	}
 145:Src/irq.c     ****     }
 146:Src/irq.c     ****     if ( i == VIC_SIZE )
 173              	.LVL7:
 174 00f0 0000A0E3 		bx	lr
 175              	.LVL8:
 176 00f4 1EFF2FE1 	.L35:
 177              		.loc 1 142 0
 178              		str	r3, [r2, #0]
 179              		.loc 1 141 0
 180 00f8 003082E5 		mov	r3, #0
 181              		str	r3, [r2, #-256]
 182 00fc 0030A0E3 		.loc 1 151 0
 183 0100 003102E5 		mov	r0, #1
 147:Src/irq.c     ****     {
 148:Src/irq.c     **** 	return( FALSE );		/* fatal error, can't find interrupt number 
 149:Src/irq.c     **** 					in vector slot */
 150:Src/irq.c     ****     }
 151:Src/irq.c     ****     VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
 184              		r3, #0
 185 0104 0100A0E3 		str	ip, [r3, #-4079]
 186              		.loc 1 153 0
 187 0108 0030E0E3 		bx	lr
 188 010c EFCF03E5 	.L39:
 152:Src/irq.c     ****     return( TRUE );
 153:Src/irq.c     **** }
 189              	gn	2
 190 0110 1EFF2FE1 	.L38:
 191              		.word	-3584
 192              	.LFE5:
 194 0114 00F2FFFF 		.section	.debug_frame,"",%progbits
 195              	.Lframe0:
 196              		.4byte	.LECIE0-.LSCIE0
 252              	.LLST2:
DEFINED SYMBOLS
                            *ABS*:00000000 irq.c
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:12     .text:00000000 DefaultVICHandler
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:21     .text:00000000 $a
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:33     .text:00000010 init_VIC
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:74     .text:00000050 $d
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:80     .text:00000054 install_irq
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:88     .text:00000054 $a
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:135    .text:000000b4 $d
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:141    .text:000000b8 uninstall_irq
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:150    .text:000000b8 $a
C:\Users\ANNIMB~1\AppData\Local\Temp/ccE5aaaa.s:194    .text:00000114 $d

NO UNDEFINED SYMBOLS
